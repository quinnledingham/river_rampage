#version 420 core
layout(quads, fractional_odd_spacing, ccw) in;

struct Wave {
	vec2 direction;
	float wave_length;
	float steepness;

	//float k;
	//float c;
	//vec2  d;
	//float a;
};

in vec2 texture_coord[];

out vec2 uv;
out vec4 normal;

layout (std140) uniform Matrices
{
	mat4 projection;
	mat4 view;
};

layout (std140) uniform Wav
{
	Wave waves[5];
};

uniform mat4 model;
uniform float time;

#define PI 3.14159265359f

// wave = (direction.x, direction.y, wave_length, steepness)
vec3 apply_wave(vec3 pos, vec4 wave, float time)
{
	vec2 direction = wave.xy;
	float wave_length = wave.z;
	float steepness = wave.w;

	float k = 2 * PI / wave_length;
	float c = sqrt(9.8 / k);
	vec2 d = normalize(direction);
	float f = k * (dot(d, pos.xz) - c * time);
	float a = steepness / k;

	return vec3(d.x * (a * cos(f)),
				a * sin(f),
				d.y * (a * cos(f)));
}

vec3 apply_wave(vec3 pos, Wave wave, float time)
{
	float k = 2 * PI / wave.wave_length;
	float c = sqrt(9.8 / k);
	vec2 d = normalize(wave.direction);
	float f = k * (dot(d, pos.xz) - c * time);
	float a = wave.steepness / k;

	return vec3(d.x * (a * cos(f)),
				a * sin(f),
				d.y * (a * cos(f)));
}

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec2 t00 = texture_coord[0];
    vec2 t01 = texture_coord[1];
    vec2 t10 = texture_coord[2];
    vec2 t11 = texture_coord[3];

    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 texCoord = (t1 - t0) * v + t0;

    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    normal = normalize( vec4(cross(vVec.xyz, uVec.xyz), 0) );

    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;

	vec4 pos = model * p;
	vec4 const_pos = pos;  

	//for (int i = 0; i < 1; i++) pos.xyz += apply_wave(const_pos.xyz, waves[i], time / 5.0);
	//pos.xyz += apply_wave(const_pos.xyz, vec4(1.0, 0.0, 20.0, 0.2), time / 5.0);
/*
	pos.xyz += apply_wave(const_pos, vec4(1.0, 0.0, 20.0, 0.2), time / 5.0);
	pos.xyz += apply_wave(const_pos, vec4(1.0, 1.0, 1.0, 0.15), time / 5.0);
	pos.xyz += apply_wave(const_pos, vec4(0.1, 0.1, 2.0, 0.1), time / 5.0);
	pos.xyz += apply_wave(const_pos, vec4(0.7, 0.9, 9.0, 0.05), time / 5.0);
	pos.xyz += apply_wave(const_pos, vec4(1.0, 1.0, 10.0, 0.25), time / 5.0);
*/

	gl_Position = projection * view * pos;
	uv = texCoord;
}
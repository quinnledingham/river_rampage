#version 420 core
//layout(quads, fractional_odd_spacing, ccw) in;
layout(quads) in;

struct Wave {
	vec2 direction;
	float wave_length;
	float steepness;

	//float k;
	//float c;
	//vec2  d;
	//float a;
};


in vec3 tc_position[];
in vec2 texture_coord[];

out vec3 te_position;
out vec2 uv;

layout (std140) uniform Matrices
{
    mat4 projection;
    mat4 view;
};

layout (std140) uniform Wav
{
	Wave waves[5];
};

uniform mat4 model;
uniform float time;

#define PI 3.14159265359f

vec3 apply_wave(vec3 pos, Wave wave, float time)
{
	float k = 2 * PI / wave.wave_length;
	float c = sqrt(9.8 / k);
	vec2 d = normalize(wave.direction);
	float f = k * (dot(d, pos.xz) - c * time);
	float a = wave.steepness / k;

	return vec3(d.x * (a * cos(f)),
				a * sin(f),
				d.y * (a * cos(f)));
}

void main() {
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;

	vec3 a = mix(tc_position[0], tc_position[1], u);
    vec3 b = mix(tc_position[2], tc_position[3], u);
	te_position = mix(a, b, v);

	te_position = vec3(model * vec4(te_position, 1));
	vec3 const_pos = te_position;
	for (int i = 0; i < 5; i++) te_position += apply_wave(const_pos, waves[i], time / 5.0);

    //tePatchDistance = vec4(u, v, 1-u, 1-v);

	vec3 c = mix(vec3(texture_coord[0], 1), vec3(texture_coord[1], 1), u);
    vec3 d = mix(vec3(texture_coord[2], 1), vec3(texture_coord[3], 1), u);
	vec2 texCoord = vec2(mix(c, d, v));
    uv = texCoord;
}